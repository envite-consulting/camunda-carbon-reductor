/*
 * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH
 * under one or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information regarding copyright
 * ownership. Camunda licenses this file to you under the Apache License,
 * Version 2.0; you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * CarbonAware.WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;
import org.threeten.bp.OffsetDateTime;

/** EmissionsForecastBatchParametersDTO */
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2022-10-17T16:13:58.157Z[GMT]")
public class EmissionsForecastBatchParametersDTO {
  @SerializedName("requestedAt")
  private OffsetDateTime requestedAt = null;

  @SerializedName("location")
  private String location = null;

  @SerializedName("dataStartAt")
  private OffsetDateTime dataStartAt = null;

  @SerializedName("dataEndAt")
  private OffsetDateTime dataEndAt = null;

  @SerializedName("windowSize")
  private Integer windowSize = null;

  public EmissionsForecastBatchParametersDTO requestedAt(OffsetDateTime requestedAt) {
    this.requestedAt = requestedAt;
    return this;
  }

  /**
   * For historical forecast requests, this value is the timestamp used to access the most recently
   * generated forecast as of that time.
   *
   * @return requestedAt
   */
  @Schema(
      example = "2022-06-01T00:03:30Z",
      description =
          "For historical forecast requests, this value is the timestamp used to access the most  recently generated forecast as of that time.")
  public OffsetDateTime getRequestedAt() {
    return requestedAt;
  }

  public void setRequestedAt(OffsetDateTime requestedAt) {
    this.requestedAt = requestedAt;
  }

  public EmissionsForecastBatchParametersDTO location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The location of the forecast
   *
   * @return location
   */
  @Schema(example = "eastus", description = "The location of the forecast")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public EmissionsForecastBatchParametersDTO dataStartAt(OffsetDateTime dataStartAt) {
    this.dataStartAt = dataStartAt;
    return this;
  }

  /**
   * Start time boundary of forecasted data points.Ignores current forecast data points before this
   * time. Defaults to the earliest time in the forecast data.
   *
   * @return dataStartAt
   */
  @Schema(
      example = "2022-03-01T15:30Z",
      description =
          "Start time boundary of forecasted data points.Ignores current forecast data points before this time.  Defaults to the earliest time in the forecast data.")
  public OffsetDateTime getDataStartAt() {
    return dataStartAt;
  }

  public void setDataStartAt(OffsetDateTime dataStartAt) {
    this.dataStartAt = dataStartAt;
  }

  public EmissionsForecastBatchParametersDTO dataEndAt(OffsetDateTime dataEndAt) {
    this.dataEndAt = dataEndAt;
    return this;
  }

  /**
   * End time boundary of forecasted data points. Ignores current forecast data points after this
   * time. Defaults to the latest time in the forecast data.
   *
   * @return dataEndAt
   */
  @Schema(
      example = "2022-03-01T18:30Z",
      description =
          "End time boundary of forecasted data points. Ignores current forecast data points after this time.  Defaults to the latest time in the forecast data.")
  public OffsetDateTime getDataEndAt() {
    return dataEndAt;
  }

  public void setDataEndAt(OffsetDateTime dataEndAt) {
    this.dataEndAt = dataEndAt;
  }

  public EmissionsForecastBatchParametersDTO windowSize(Integer windowSize) {
    this.windowSize = windowSize;
    return this;
  }

  /**
   * The estimated duration (in minutes) of the workload. Defaults to the duration of a single
   * forecast data point.
   *
   * @return windowSize
   */
  @Schema(
      example = "30",
      description =
          "The estimated duration (in minutes) of the workload.  Defaults to the duration of a single forecast data point.")
  public Integer getWindowSize() {
    return windowSize;
  }

  public void setWindowSize(Integer windowSize) {
    this.windowSize = windowSize;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmissionsForecastBatchParametersDTO emissionsForecastBatchParametersDTO =
        (EmissionsForecastBatchParametersDTO) o;
    return Objects.equals(this.requestedAt, emissionsForecastBatchParametersDTO.requestedAt)
        && Objects.equals(this.location, emissionsForecastBatchParametersDTO.location)
        && Objects.equals(this.dataStartAt, emissionsForecastBatchParametersDTO.dataStartAt)
        && Objects.equals(this.dataEndAt, emissionsForecastBatchParametersDTO.dataEndAt)
        && Objects.equals(this.windowSize, emissionsForecastBatchParametersDTO.windowSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestedAt, location, dataStartAt, dataEndAt, windowSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmissionsForecastBatchParametersDTO {\n");

    sb.append("    requestedAt: ").append(toIndentedString(requestedAt)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    dataStartAt: ").append(toIndentedString(dataStartAt)).append("\n");
    sb.append("    dataEndAt: ").append(toIndentedString(dataEndAt)).append("\n");
    sb.append("    windowSize: ").append(toIndentedString(windowSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
